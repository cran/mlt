
R version 4.0.3 (2020-10-10) -- "Bunny-Wunnies Freak Out"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "mlt"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('mlt')
Loading required package: basefun
Loading required package: variables
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("R")
> ### * R
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: R
> ### Title: Response Variable
> ### Aliases: R R.Surv R.factor R.ordered R.numeric R.integer R.list
> ###   R.response as.Surv as.Surv.response
> 
> ### ** Examples
> 
> 
>  ### ordered factor
>  R(gl(3, 3, labels = LETTERS[1:3]))
Warning in R.factor(gl(3, 3, labels = LETTERS[1:3])) :
  response is unordered factor;
             results may depend on order of levels
[1] (NA, A] (NA, A] (NA, A] (A, B]  (A, B]  (A, B]  (B, NA] (B, NA] (B, NA]
> 
> 
> 
> 
> cleanEx()
> nameEx("mlt")
> ### * mlt
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlt
> ### Title: Most Likely Transformations
> ### Aliases: mlt
> 
> ### ** Examples
> 
>  
>   ### set-up conditional transformation model for conditional
>   ### distribution of dist given speed
>   dist <- numeric_var("dist", support = c(2.0, 100), bounds = c(0, Inf))
>   speed <- numeric_var("speed", support = c(5.0, 23), bounds = c(0, Inf)) 
>   ctmm <- ctm(response = Bernstein_basis(dist, order = 4, ui = "increasing"),
+               interacting = Bernstein_basis(speed, order = 3))
> 
>   ### fit model
>   mltm <- mlt(ctmm, data = cars)
> 
>   ### plot data
>   plot(cars)
>   ### predict quantiles and overlay data with model via a "quantile sheet"
>   q <- predict(mltm, newdata = data.frame(speed = 0:24), type = "quantile", 
+                p = 2:8 / 10, K = 500)
>   tmp <- apply(q, 1, function(x) lines(0:24, x, type = "l"))
> 
> 
> 
> 
> cleanEx()
> nameEx("mltoptim")
> ### * mltoptim
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mltoptim
> ### Title: Control Optimisation
> ### Aliases: mltoptim
> ### Keywords: list
> 
> ### ** Examples
> 
> 
>   ### set-up linear transformation model for conditional
>   ### distribution of dist given speed
>   dist <- numeric_var("dist", support = c(2.0, 100), bounds = c(0, Inf))
>   ctmm <- ctm(response = Bernstein_basis(dist, order = 4, ui = "increasing"),
+               shifting = ~ speed, data = cars)
> 
>   ### use auglag with kkt2.check = TRUE => the numerically determined
>   ### hessian is returned as "optim_hessian" slot
>   op <- mltoptim(auglag = list(maxtry = 5, kkt2.check = TRUE))[1]
>   mltm <- mlt(ctmm, data = cars, scale = FALSE, optim = op)
> 
>   ### compare analytical and numerical hessian
>   all.equal(c(Hessian(mltm)), c(mltm$optim_hessian), tol = 1e-4)
[1] TRUE
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  1.402 0.096 1.498 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
