
R version 3.2.4 (2016-03-10) -- "Very Secure Dishes"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> library("mlt")
Loading required package: basefun
Loading required package: variables
> library("sandwich")
> set.seed(29)
> 
> ### Nadja Klein
> dat <- data.frame(matrix(rnorm(300),ncol=3))
> names(dat) <- c("y","x1","x2")
> ### set-up conditional transformation model for conditional
> y <- numeric_var("y", support = c(min(dat$y), max(dat$y)), bounds = c(-Inf, Inf))
> x1 <- numeric_var("x1", support = c(min(dat$x1), max(dat$x1)), bounds = c(-Inf, Inf)) 
> x2 <- numeric_var("x2", support = c(min(dat$x2), max(dat$x2)), bounds = c(-Inf, Inf)) 
> ctmm2 <- ctm(response = Bernstein_basis(y, order = 4, ui = "increasing"),
+               interacting = c(x1=Bernstein_basis(x1, order = 3),
+                               x2=Bernstein_basis(x2, order= 3)))
Note: method with signature 'diagonalMatrix#Matrix' chosen for function 'kronecker',
 target signature 'ddiMatrix#dgCMatrix'.
 "ANY#sparseMatrix" would also be valid
Note: method with signature 'dsparseMatrix#dsparseMatrix' chosen for function 'kronecker',
 target signature 'dtTMatrix#dgCMatrix'.
 "TsparseMatrix#sparseMatrix" would also be valid
Note: method with signature 'Matrix#diagonalMatrix' chosen for function 'kronecker',
 target signature 'dtCMatrix#ddiMatrix'.
 "sparseMatrix#ANY" would also be valid
Note: method with signature 'dsparseMatrix#dsparseMatrix' chosen for function 'kronecker',
 target signature 'dtCMatrix#dtTMatrix'.
 "sparseMatrix#TsparseMatrix" would also be valid
Note: method with signature 'Matrix#numLike' chosen for function '%*%',
 target signature 'dgTMatrix#numeric'.
 "TsparseMatrix#ANY" would also be valid
Note: method with signature 'sparseMatrix#matrix' chosen for function '%*%',
 target signature 'dgTMatrix#matrix'.
 "TsparseMatrix#ANY" would also be valid
> ### fit model
> mltm2 <- mlt(ctmm2, data = dat)
> (p <- predict(mltm2, newdata = data.frame(x1=0, x2 = 0), q = mkgrid(mltm2, n = 10)[["y"]]))
        
y              [,1]
  -2.43  -2.4279998
  -1.92  -1.7822914
   -1.4  -1.1666021
  -0.89  -0.6071547
  -0.375 -0.1118260
  0.139   0.3298532
  0.654   0.7466983
   1.17   1.1858707
   1.68   1.7128779
    2.2   2.4115734
> ### plot data
> plot(mltm2,newdata=expand.grid(x1=0:1, x2 = 0:1))
> 
> ### check update
> dist <- numeric_var("dist", support = c(2.0, 100), bounds = c(0, Inf))
> speed <- numeric_var("speed", support = c(5.0, 23), bounds = c(0, Inf)) 
> ctmm <- ctm(response = Bernstein_basis(dist, order = 4, ui = "increasing"),
+             interacting = Bernstein_basis(speed, order = 3))
Note: method with signature 'diagonalMatrix#Matrix' chosen for function 'kronecker',
 target signature 'ddiMatrix#ddiMatrix'.
 "Matrix#diagonalMatrix" would also be valid
Note: method with signature 'TsparseMatrix#sparseMatrix' chosen for function 'kronecker',
 target signature 'dtTMatrix#ddiMatrix'.
 "Matrix#diagonalMatrix" would also be valid
> 
> m <- mlt(ctmm, data = cars)
> e <- estfun(m)
> w <- runif(nrow(cars)) < .8
> m1 <- update(m, weights = w, theta = coef(m))
> e1 <- estfun(m1, parm = coef(m))
> stopifnot(max(abs(e * w - e1)) < .Machine$double.eps)
> e1 <- estfun(m1)
> m2 <- mlt(ctmm, data = cars[w > 0,], theta = coef(m))
> stopifnot(isTRUE(all.equal(logLik(m1), logLik(m2))))
> stopifnot(isTRUE(all.equal(logLik(m1, coef(m2)), logLik(m2, coef(m1)))))
> e2 <- estfun(m2, parm = coef(m1))
> stopifnot(max(abs(e1[w > 0,] - e2)) < .Machine$double.eps)
> 
> ### Muriel Buri
> data("bodyfat", package = "TH.data")
> set.seed(29)
> 
> y <- numeric_var("DEXfat", support = c(15, 45), bounds = c(10, 64))
> basis_y <- Bernstein_basis(y, order = 2, ui = "incre")
> x <- names(bodyfat)[-2]
> xfm <- as.formula(paste("~", x, collapse = "+"))
> m <- ctm(basis_y, shift = xfm, data = bodyfat)
> mod <- mlt(m, data = bodyfat, scale = TRUE, checkGrad = FALSE)
> summary(mod)

Call:
mlt(model = m, data = bodyfat, scale = TRUE, checkGrad = FALSE)

Type:  continuous linear transformation model (transformed normal distribution)
AIC:  366.2854
Log-Likelihood: -171.1427 (df = 12)

Coefficients: 30.96152 38.89751 42.53768 -0.01509283 -0.0591355 -0.121279 -0.05441104 -0.4771851 -0.3511881 -2.426589 -1.130494 0.3837763

> 
> proc.time()
   user  system elapsed 
  2.652   0.020   2.670 
